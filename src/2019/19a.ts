import * as assert from "assert";
import { Coord, Grid } from "./modules/grid";
import { IntCodeMachine } from "./modules/IntCodeMachine";
import { Rig } from "./modules/rig";
/*
Shape:
#.................................................
..................................................
..................................................
....#.............................................
.....#............................................
......#...........................................
.......##.........................................
........##........................................
.........##.......................................
..........###.....................................
...........###....................................
............###...................................
.............####.................................
...............###................................
................###...............................
.................####.............................
..................####............................
...................####...........................
....................#####.........................
.....................#####........................
......................#####.......................
.......................######.....................
........................######....................
.........................######...................
..........................#######.................
............................######................
.............................######...............
..............................#######.............
...............................#######............
................................#######...........
.................................########.........
..................................########........
...................................########.......
....................................#########.....
.....................................#########....
......................................#########...
.......................................##########.
.........................................#########
..........................................########
...........................................#######
............................................######
.............................................#####
..............................................####
...............................................###
................................................##
.................................................#
..................................................
..................................................
..................................................
..................................................
*/

let code;
const probe = async (x, y) => {
    const machine = new IntCodeMachine(code.slice(0));
    machine.Run(0);
    machine.input(x);
    machine.input(y);
    const val = await machine.readOut();
    console.log(`probing: ${x} x ${y}: ${val}`);
    return val;
};
const findLowestFitting = async (size: number) => {
    let yTooSmall = 6;
    let yTooLargeOrOK = size * 100;
    let xRightEdge: number;
    let fittingLeftEdge: Coord;

    while (yTooLargeOrOK - yTooSmall > 1) {
        const yProbe = Math.floor((yTooSmall + yTooLargeOrOK) / 2);
        console.log(` trying y = ${yProbe}`);
        let xProbe = yProbe;
        let beamEntered = false;
        while (true) {
            const val = await probe(xProbe, yProbe);
            if (val === 1) {
                beamEntered = true;
            } else {
                if (beamEntered) {
                    // just exited: one step back and exit loop
                    xRightEdge = xProbe - 1;
                    break;
                }
            }
            xProbe++;
        }
        const bottomLeft = await probe(xRightEdge - size + 1, yProbe + size - 1);
        if (bottomLeft === 1) {
            yTooLargeOrOK = yProbe;
            fittingLeftEdge = new Coord(xRightEdge - size + 1, yProbe);
        } else {
            console.log(`  need larger y`);
            yTooSmall = yProbe;
        }
    }

    return fittingLeftEdge;

};
const rig = new Rig(19,
    async (d, o, size: number) => {
        code = d.split(",").map(Number);
        const topLeft: Coord = await findLowestFitting(size);
        return topLeft.x * 10000 + topLeft.y;
    }
);
(async () => {
    await rig.runPrint(2);
    await rig.runPrint(3);
    await rig.runPrint(100);
})().then(() => {console.log("Done"); });
